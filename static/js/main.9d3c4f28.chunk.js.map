{"version":3,"sources":["components/Navbar.js","components/TexForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","s","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","title","document","body","Date","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d3c4f28.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n            \r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                    <li className=\"nav-item\">\r\n                       \r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                      \r\n                    </li>\r\n                </ul>\r\n                <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react'\r\nimport '../TextForm.css'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{ \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value) \r\n    }\r\n\r\n    // Credits: A\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text); \r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    // Credits: Coding Wala\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(''); \r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            <h1 className='thing' s>\r\n            Edit your text here according to your need!!\r\n            </h1>\r\n            <div className=\"mb-3\"> \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn \" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn \" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn \" onClick={handleClearClick}>Clear Text</button>\r\n            <button disabled={text.length===0} className=\"btn \" onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\"btn \" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n  \r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h2 >Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n        </div>\r\n      \r\n        </>\r\n    )\r\n}","   \r\nimport React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  Alert","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TexForm from './components/TexForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\n\n\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n\n\n  const toggleMode = ()=>{ // This is using for the dark mode\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n\n//ALERT\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n          setAlert(null);\n      }, 1500);\n  }\n  \n\n\n  return (\n    //jsx \n    //\n   <>\n  \n   <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} key={new Date()} />\n   <Alert alert={alert}/>\n   <div className=\"container my-3\">\n   \n   {/* /users --> Component 1\n       /users/home --> Component 2 */}\n        \n       \n       <TexForm showAlert={showAlert} mode={mode}/>  \n         \n     \n        \n   \n   </div>\n   \n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}